'use client';

import { useState } from 'react';
import { SignedIn, SignedOut, RedirectToSignIn } from '@clerk/nextjs';
import AIDetectionForm from '@/components/AIDetectionForm';
import AIDetectionResults from '@/components/AIDetectionResults';
import PageHeader from '@/components/PageHeader';

interface AIDetectionResult {
  winstonai?: {
    ai_score: number;
    items: Array<{
      text: string;
      prediction: string;
      ai_score: number;
      ai_score_detail?: number;
    }>;
    cost: number;
  };
  sapling?: {
    ai_score: number;
    items: Array<{
      text: string;
      prediction: string;
      ai_score: number;
      ai_score_detail?: number;
    }>;
    cost: number;
  };
}

interface ErrorResponse {
  message: string;
  errorCode?: string;
}

export default function AIDetectionPage() {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [results, setResults] = useState<AIDetectionResult | null>(null);
  const [error, setError] = useState('');
  const [isPaymentError, setIsPaymentError] = useState(false);

  const handleAnalyze = async (text: string) => {
    if (!text.trim()) {
      setError('Please enter some text to analyze');
      setIsPaymentError(false);
      return;
    }

    setIsAnalyzing(true);
    setError('');
    setIsPaymentError(false);

    try {
      const response = await fetch('/api/ai-detection', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ text }),
      });

      if (!response.ok) {
        const errorData: ErrorResponse = await response.json();
        
        if (response.status === 402 || errorData.errorCode === 'PAYMENT_REQUIRED') {
          setIsPaymentError(true);
        }
        
        throw new Error(errorData.message || 'Failed to analyze text');
      }

      const data = await response.json();
      setResults(data);
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : 'An error occurred while analyzing the text';
      setError(errorMessage);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleReset = () => {
    setResults(null);
    setError('');
    setIsPaymentError(false);
  };

  return (
    <div className="flex flex-col min-h-screen bg-gradient-to-b from-white to-blue-50 dark:from-gray-900 dark:to-gray-800">
      <PageHeader 
        title="AI Content Detection" 
        description="Check if your text was generated by AI with our advanced detection technology" 
      />

      <main className="flex-grow container mx-auto px-4 py-8">
        <SignedIn>
          <div className="max-w-4xl mx-auto">
            {results ? (
              <AIDetectionResults results={results} onReset={handleReset} />
            ) : (
              <AIDetectionForm 
                onAnalyze={handleAnalyze} 
                isAnalyzing={isAnalyzing} 
                error={error}
                isPaymentError={isPaymentError}
              />
            )}
          </div>
        </SignedIn>
        <SignedOut>
          <RedirectToSignIn />
        </SignedOut>
      </main>
    </div>
  );
} 